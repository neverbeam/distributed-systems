import matplotlib.pyplot as plt
import numpy as np
import pandas
import pickle


def mc_trace():
    # # Generated by minecraft_server.py (Game Trace Format v06) on Tue August 13, 2013, at 05:25:14 PM 
    # # Author: Yong Guo (Yong.Guo at tudelft.nl)
    # # 
    # # Command line: ['minecraft_server.py']
    # # 
    # RowID, ServerID, Timestamp, PlayerNum, MaxPlayerNum, UpTime
    # filename = "MineCraft/MineCraft_Node_Server_Fixed_Dynamic"
    # df = pandas.read_csv(filename, skiprows=5, nrows=2000000, dtype={3: str, 4: str})

    # samples = [1000, 100000, 1000000]
    # for s in samples:
    #     df.head(s).to_csv('MineCraft/mc_sample'+str(s)+'.csv', index=False)

    col_names = ["RowID", "ServerID", "Timestamp", "PlayerNum", "MaxPlayerNum", "UpTime"]
    df = pandas.read_csv('MineCraft/mc_sample1000000.csv', skiprows=1, names=col_names, engine="python", \
            dtype={3: str, 4: str}, na_values=[' PlayerNumNull', ' TimestampNull', ' None', ' nan'])
    # df = df[np.isreal(df[["ServerID", "Timestamp", "PlayerNum", "MaxPlayerNum"]])]
    df["Timestamp"] = pandas.to_numeric(df["Timestamp"], errors="coerce")
    df["PlayerNum"] = pandas.to_numeric(df["PlayerNum"], errors="coerce")
    df["MaxPlayerNum"] = pandas.to_numeric(df["MaxPlayerNum"], errors="coerce")
    df = df[pandas.notnull(df["Timestamp"])]
    df = df[pandas.notnull(df["PlayerNum"])]
    df = df[pandas.notnull(df["MaxPlayerNum"])]
    sids = df["ServerID"].unique()
    for sid in sids:
        if sid < 20:
            this_s = df.loc[df["ServerID"] == sid]
            times = list(this_s["Timestamp"])
            n_players = list(this_s["PlayerNum"])
            plt.plot(times, n_players, label=sid)
    plt.xlabel('Time')
    plt.ylabel('Players')
    # plt.legend(loc="best")
    plt.show()


def wow_trace():
    # filename = "WoWSession/WoWSession_Node_Player_Fixed_Dynamic"
    # df = pandas.read_csv(filename, skiprows=5, sep="\,\ ", nrows=10000000, dtype={3: str, 4: str})

    # samples = [1000, 100000, 1000000]
    # for s in samples:
    #     df.head(s).to_csv('WoWSession/wow_sample'+str(s)+'.csv', index=False)

    col_names = ["RowID", "PlayerID", "Timestamp", "Event", "Category"]
    df = pandas.read_csv('WoWSession/wow_sample100000.csv', skiprows=1, names=col_names, engine="python", \
            dtype={3: str, 4: str}, na_values=[' PlayerIDNull', ' TimestampNull', ' None', ' nan'])
    # make sure we keep only non null data
    df["Timestamp"] = pandas.to_numeric(df["Timestamp"], errors="coerce")
    df["PlayerNum"] = pandas.to_numeric(df["PlayerID"], errors="coerce")
    df = df[pandas.notnull(df["Timestamp"])]
    df = df[pandas.notnull(df["PlayerID"])]

    # event_types = df["Event"].unique()
    # print(event_types)

    pdf = df.loc[(df["Event"] == "PLAYER_LOGIN") | (df["Event"] == "PLAYER_LOGOUT")]
    playerID = -1
    login_time = -1
    play_times = []
    for _, entry in pdf.iterrows():
        # a player logged in
        if entry["Event"] == "PLAYER_LOGIN":
            # keep track of its id and login time
            playerID = entry["PlayerID"]
            login_time = entry["Timestamp"]
        # a player logged out
        elif entry["PlayerID"] == playerID:
            logout_time = entry["Timestamp"]
            play_times.append(logout_time - login_time)
    print(len(play_times))
    print(np.mean(play_times))
    print(np.std(play_times))
    plt.plot(play_times)
    plt.xlabel('Player')
    plt.ylabel('Time')
    plt.show()

    plt.hist(play_times, 50, [min(play_times),max(play_times)])
    plt.xlabel("Play time")
    plt.ylabel('Number of occurences')
    plt.show()

    return play_times

    # # show total player stats
    # t = []
    # pcount = []
    # pprev = 0
    # for _, entry in pdf.iterrows():
    #     t.append(entry["Timestamp"])
    #     if entry["Event"] == "PLAYER_LOGIN":
    #         # add 1 to player count
    #         pprev += 1
    #     else:
    #         # remove 1 from player count
    #         # if pprev > 0:
    #         #     pprev -= 1
    #         pprev -= 1
    #     pcount.append(pprev)
    #     # pcount.append(entry["PlayerID"])
    # plt.plot(t, pcount)
    # plt.xlabel('Time')
    # plt.ylabel('Players')
    # # plt.legend(loc="best")
    # plt.show()

if __name__ == '__main__':
    # mc_trace()
    play_dist = wow_trace()
    pickle.dump( play_dist, open( "wow_trace.p", "wb" ) )